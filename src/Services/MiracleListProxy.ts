/* tslint:disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v11.1.0.0 (NJsonSchema v9.1.11.0) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import 'rxjs/add/observable/fromPromise';
import 'rxjs/add/observable/of';
import 'rxjs/add/observable/throw';
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/toPromise';
import 'rxjs/add/operator/mergeMap';
import 'rxjs/add/operator/catch';

import { Observable } from 'rxjs/Observable';
import { Injectable, Inject, Optional, OpaqueToken } from '@angular/core';
import { Http, Headers, ResponseContentType, Response } from '@angular/http';

export const API_BASE_URL = new OpaqueToken('API_BASE_URL');

@Injectable()
export class MiracleListProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "https://miraclelistbackend.azurewebsites.net";
    }

    about(): Observable<string[] | null> {
        let url_ = this.baseUrl + "/About";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processAbout(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processAbout(response_);
                } catch (e) {
                    return <Observable<string[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<string[]>><any>Observable.throw(response_);
        });
    }

    protected processAbout(response: Response): Observable<string[] | null> {
        const status = response.status;

        if (status === 200) {
            const _responseText = response.text();
            let result200: string[] | null = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(item);
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText);
        }
        return Observable.of<string[] | null>(<any>null);
    }

    version(): Observable<string | null> {
        let url_ = this.baseUrl + "/Version";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processVersion(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processVersion(response_);
                } catch (e) {
                    return <Observable<string>><any>Observable.throw(e);
                }
            } else
                return <Observable<string>><any>Observable.throw(response_);
        });
    }

    protected processVersion(response: Response): Observable<string | null> {
        const status = response.status;

        if (status === 200) {
            const _responseText = response.text();
            let result200: string | null = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText);
        }
        return Observable.of<string | null>(<any>null);
    }

    login(loginInfo: LoginInfo): Observable<LoginInfo | null> {
        let url_ = this.baseUrl + "/Login";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(loginInfo);

        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processLogin(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processLogin(response_);
                } catch (e) {
                    return <Observable<LoginInfo>><any>Observable.throw(e);
                }
            } else
                return <Observable<LoginInfo>><any>Observable.throw(response_);
        });
    }

    protected processLogin(response: Response): Observable<LoginInfo | null> {
        const status = response.status;

        if (status === 200) {
            const _responseText = response.text();
            let result200: LoginInfo | null = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? LoginInfo.fromJS(resultData200) : <any>null;
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText);
        }
        return Observable.of<LoginInfo | null>(<any>null);
    }

    logoff(token: string): Observable<boolean | null> {
        let url_ = this.baseUrl + "/Logoff/{token}";
        if (token === undefined || token === null)
            throw new Error("The parameter 'token' must be defined.");
        url_ = url_.replace("{token}", encodeURIComponent("" + token));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processLogoff(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processLogoff(response_);
                } catch (e) {
                    return <Observable<boolean>><any>Observable.throw(e);
                }
            } else
                return <Observable<boolean>><any>Observable.throw(response_);
        });
    }

    protected processLogoff(response: Response): Observable<boolean | null> {
        const status = response.status;

        if (status === 200) {
            const _responseText = response.text();
            let result200: boolean | null = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText);
        }
        return Observable.of<boolean | null>(<any>null);
    }

    categorySet(token: string): Observable<Category[] | null> {
        let url_ = this.baseUrl + "/CategorySet/{token}";
        if (token === undefined || token === null)
            throw new Error("The parameter 'token' must be defined.");
        url_ = url_.replace("{token}", encodeURIComponent("" + token));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCategorySet(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCategorySet(response_);
                } catch (e) {
                    return <Observable<Category[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<Category[]>><any>Observable.throw(response_);
        });
    }

    protected processCategorySet(response: Response): Observable<Category[] | null> {
        const status = response.status;

        if (status === 200) {
            const _responseText = response.text();
            let result200: Category[] | null = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(Category.fromJS(item));
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText);
        }
        return Observable.of<Category[] | null>(<any>null);
    }

    taskSet(token: string, id: number): Observable<Task[] | null> {
        let url_ = this.baseUrl + "/TaskSet/{token}/{id}";
        if (token === undefined || token === null)
            throw new Error("The parameter 'token' must be defined.");
        url_ = url_.replace("{token}", encodeURIComponent("" + token));
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processTaskSet(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processTaskSet(response_);
                } catch (e) {
                    return <Observable<Task[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<Task[]>><any>Observable.throw(response_);
        });
    }

    protected processTaskSet(response: Response): Observable<Task[] | null> {
        const status = response.status;

        if (status === 200) {
            const _responseText = response.text();
            let result200: Task[] | null = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(Task.fromJS(item));
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText);
        }
        return Observable.of<Task[] | null>(<any>null);
    }

    task(token: string, id: number): Observable<Task | null> {
        let url_ = this.baseUrl + "/Task/{token}/{id}";
        if (token === undefined || token === null)
            throw new Error("The parameter 'token' must be defined.");
        url_ = url_.replace("{token}", encodeURIComponent("" + token));
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processTask(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processTask(response_);
                } catch (e) {
                    return <Observable<Task>><any>Observable.throw(e);
                }
            } else
                return <Observable<Task>><any>Observable.throw(response_);
        });
    }

    protected processTask(response: Response): Observable<Task | null> {
        const status = response.status;

        if (status === 200) {
            const _responseText = response.text();
            let result200: Task | null = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? Task.fromJS(resultData200) : <any>null;
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText);
        }
        return Observable.of<Task | null>(<any>null);
    }

    search(token: string, text: string): Observable<Category[] | null> {
        let url_ = this.baseUrl + "/Search/{token}/{text}";
        if (token === undefined || token === null)
            throw new Error("The parameter 'token' must be defined.");
        url_ = url_.replace("{token}", encodeURIComponent("" + token));
        if (text === undefined || text === null)
            throw new Error("The parameter 'text' must be defined.");
        url_ = url_.replace("{text}", encodeURIComponent("" + text));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processSearch(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processSearch(response_);
                } catch (e) {
                    return <Observable<Category[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<Category[]>><any>Observable.throw(response_);
        });
    }

    protected processSearch(response: Response): Observable<Category[] | null> {
        const status = response.status;

        if (status === 200) {
            const _responseText = response.text();
            let result200: Category[] | null = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(Category.fromJS(item));
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText);
        }
        return Observable.of<Category[] | null>(<any>null);
    }

    dueTaskSet(token: string): Observable<Category[] | null> {
        let url_ = this.baseUrl + "/DueTaskSet/{token}";
        if (token === undefined || token === null)
            throw new Error("The parameter 'token' must be defined.");
        url_ = url_.replace("{token}", encodeURIComponent("" + token));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processDueTaskSet(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processDueTaskSet(response_);
                } catch (e) {
                    return <Observable<Category[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<Category[]>><any>Observable.throw(response_);
        });
    }

    protected processDueTaskSet(response: Response): Observable<Category[] | null> {
        const status = response.status;

        if (status === 200) {
            const _responseText = response.text();
            let result200: Category[] | null = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(Category.fromJS(item));
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText);
        }
        return Observable.of<Category[] | null>(<any>null);
    }

    createCategory(token: string, name: string): Observable<Category | null> {
        let url_ = this.baseUrl + "/CreateCategory/{token}/{name}";
        if (token === undefined || token === null)
            throw new Error("The parameter 'token' must be defined.");
        url_ = url_.replace("{token}", encodeURIComponent("" + token));
        if (name === undefined || name === null)
            throw new Error("The parameter 'name' must be defined.");
        url_ = url_.replace("{name}", encodeURIComponent("" + name));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateCategory(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateCategory(response_);
                } catch (e) {
                    return <Observable<Category>><any>Observable.throw(e);
                }
            } else
                return <Observable<Category>><any>Observable.throw(response_);
        });
    }

    protected processCreateCategory(response: Response): Observable<Category | null> {
        const status = response.status;

        if (status === 200) {
            const _responseText = response.text();
            let result200: Category | null = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? Category.fromJS(resultData200) : <any>null;
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText);
        }
        return Observable.of<Category | null>(<any>null);
    }

    createTask(token: string, t: Task): Observable<Task | null> {
        let url_ = this.baseUrl + "/CreateTask/{token}";
        if (token === undefined || token === null)
            throw new Error("The parameter 'token' must be defined.");
        url_ = url_.replace("{token}", encodeURIComponent("" + token));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(t);

        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateTask(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateTask(response_);
                } catch (e) {
                    return <Observable<Task>><any>Observable.throw(e);
                }
            } else
                return <Observable<Task>><any>Observable.throw(response_);
        });
    }

    protected processCreateTask(response: Response): Observable<Task | null> {
        const status = response.status;

        if (status === 200) {
            const _responseText = response.text();
            let result200: Task | null = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? Task.fromJS(resultData200) : <any>null;
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText);
        }
        return Observable.of<Task | null>(<any>null);
    }

    changeTask(token: string, t: Task): Observable<Task | null> {
        let url_ = this.baseUrl + "/ChangeTask/{token}";
        if (token === undefined || token === null)
            throw new Error("The parameter 'token' must be defined.");
        url_ = url_.replace("{token}", encodeURIComponent("" + token));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(t);

        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processChangeTask(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processChangeTask(response_);
                } catch (e) {
                    return <Observable<Task>><any>Observable.throw(e);
                }
            } else
                return <Observable<Task>><any>Observable.throw(response_);
        });
    }

    protected processChangeTask(response: Response): Observable<Task | null> {
        const status = response.status;

        if (status === 200) {
            const _responseText = response.text();
            let result200: Task | null = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? Task.fromJS(resultData200) : <any>null;
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText);
        }
        return Observable.of<Task | null>(<any>null);
    }

    changeTaskDone(token: string, id: number, done: boolean): Observable<Task | null> {
        let url_ = this.baseUrl + "/ChangeTaskDone/{token}?";
        if (token === undefined || token === null)
            throw new Error("The parameter 'token' must be defined.");
        url_ = url_.replace("{token}", encodeURIComponent("" + token));
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        if (done === undefined || done === null)
            throw new Error("The parameter 'done' must be defined and cannot be null.");
        else
            url_ += "done=" + encodeURIComponent("" + done) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processChangeTaskDone(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processChangeTaskDone(response_);
                } catch (e) {
                    return <Observable<Task>><any>Observable.throw(e);
                }
            } else
                return <Observable<Task>><any>Observable.throw(response_);
        });
    }

    protected processChangeTaskDone(response: Response): Observable<Task | null> {
        const status = response.status;

        if (status === 200) {
            const _responseText = response.text();
            let result200: Task | null = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? Task.fromJS(resultData200) : <any>null;
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText);
        }
        return Observable.of<Task | null>(<any>null);
    }

    changeSubTask(token: string, st: SubTask): Observable<SubTask | null> {
        let url_ = this.baseUrl + "/ChangeSubTask/{token}";
        if (token === undefined || token === null)
            throw new Error("The parameter 'token' must be defined.");
        url_ = url_.replace("{token}", encodeURIComponent("" + token));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(st);

        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processChangeSubTask(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processChangeSubTask(response_);
                } catch (e) {
                    return <Observable<SubTask>><any>Observable.throw(e);
                }
            } else
                return <Observable<SubTask>><any>Observable.throw(response_);
        });
    }

    protected processChangeSubTask(response: Response): Observable<SubTask | null> {
        const status = response.status;

        if (status === 200) {
            const _responseText = response.text();
            let result200: SubTask | null = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? SubTask.fromJS(resultData200) : <any>null;
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText);
        }
        return Observable.of<SubTask | null>(<any>null);
    }

    deleteTask(token: string, id: number): Observable<void> {
        let url_ = this.baseUrl + "/DeleteTask/{token}/{id}";
        if (token === undefined || token === null)
            throw new Error("The parameter 'token' must be defined.");
        url_ = url_.replace("{token}", encodeURIComponent("" + token));
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json",
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processDeleteTask(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processDeleteTask(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processDeleteTask(response: Response): Observable<void> {
        const status = response.status;

        if (status === 204) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText);
        }
        return Observable.of<void>(<any>null);
    }

    deleteCategory(token: string, id: number): Observable<void> {
        let url_ = this.baseUrl + "/DeleteCategory/{token}/{id}";
        if (token === undefined || token === null)
            throw new Error("The parameter 'token' must be defined.");
        url_ = url_.replace("{token}", encodeURIComponent("" + token));
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json",
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processDeleteCategory(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processDeleteCategory(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processDeleteCategory(response: Response): Observable<void> {
        const status = response.status;

        if (status === 204) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText);
        }
        return Observable.of<void>(<any>null);
    }
}

export class LoginInfo implements ILoginInfo {
    clientID?: string | null;
    username?: string | null;
    password?: string | null;
    token?: string | null;
    message?: string | null;

    constructor(data?: ILoginInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.clientID = data["clientID"] !== undefined ? data["clientID"] : <any>null;
            this.username = data["username"] !== undefined ? data["username"] : <any>null;
            this.password = data["password"] !== undefined ? data["password"] : <any>null;
            this.token = data["token"] !== undefined ? data["token"] : <any>null;
            this.message = data["message"] !== undefined ? data["message"] : <any>null;
        }
    }

    static fromJS(data: any): LoginInfo {
        let result = new LoginInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["clientID"] = this.clientID !== undefined ? this.clientID : <any>null;
        data["username"] = this.username !== undefined ? this.username : <any>null;
        data["password"] = this.password !== undefined ? this.password : <any>null;
        data["token"] = this.token !== undefined ? this.token : <any>null;
        data["message"] = this.message !== undefined ? this.message : <any>null;
        return data;
    }
}

export interface ILoginInfo {
    clientID?: string | null;
    username?: string | null;
    password?: string | null;
    token?: string | null;
    message?: string | null;
}

export class Category implements ICategory {
    categoryID: number;
    name?: string | null;
    created: Date;
    taskSet?: Task[] | null;
    userID: number;

    constructor(data?: ICategory) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.categoryID = data["categoryID"] !== undefined ? data["categoryID"] : <any>null;
            this.name = data["name"] !== undefined ? data["name"] : <any>null;
            this.created = data["created"] ? new Date(data["created"].toString()) : <any>null;
            if (data["taskSet"] && data["taskSet"].constructor === Array) {
                this.taskSet = [];
                for (let item of data["taskSet"])
                    this.taskSet.push(Task.fromJS(item));
            }
            this.userID = data["userID"] !== undefined ? data["userID"] : <any>null;
        }
    }

    static fromJS(data: any): Category {
        let result = new Category();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["categoryID"] = this.categoryID !== undefined ? this.categoryID : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["created"] = this.created ? this.created.toISOString() : <any>null;
        if (this.taskSet && this.taskSet.constructor === Array) {
            data["taskSet"] = [];
            for (let item of this.taskSet)
                data["taskSet"].push(item.toJSON());
        }
        data["userID"] = this.userID !== undefined ? this.userID : <any>null;
        return data;
    }
}

export interface ICategory {
    categoryID: number;
    name?: string | null;
    created: Date;
    taskSet?: Task[] | null;
    userID: number;
}

export class Task implements ITask {
    taskID: number;
    title?: string | null;
    created: Date;
    due?: Date | null;
    importance?: Importance | null;
    note?: string | null;
    done: boolean;
    effort?: number | null;
    order: number;
    subTaskSet?: SubTask[] | null;
    category?: Category | null;
    categoryID: number;

    constructor(data?: ITask) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.taskID = data["taskID"] !== undefined ? data["taskID"] : <any>null;
            this.title = data["title"] !== undefined ? data["title"] : <any>null;
            this.created = data["created"] ? new Date(data["created"].toString()) : <any>null;
            this.due = data["due"] ? new Date(data["due"].toString()) : <any>null;
            this.importance = data["importance"] !== undefined ? data["importance"] : <any>null;
            this.note = data["note"] !== undefined ? data["note"] : <any>null;
            this.done = data["done"] !== undefined ? data["done"] : <any>null;
            this.effort = data["effort"] !== undefined ? data["effort"] : <any>null;
            this.order = data["order"] !== undefined ? data["order"] : <any>null;
            if (data["subTaskSet"] && data["subTaskSet"].constructor === Array) {
                this.subTaskSet = [];
                for (let item of data["subTaskSet"])
                    this.subTaskSet.push(SubTask.fromJS(item));
            }
            this.category = data["category"] ? Category.fromJS(data["category"]) : <any>null;
            this.categoryID = data["categoryID"] !== undefined ? data["categoryID"] : <any>null;
        }
    }

    static fromJS(data: any): Task {
        let result = new Task();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["taskID"] = this.taskID !== undefined ? this.taskID : <any>null;
        data["title"] = this.title !== undefined ? this.title : <any>null;
        data["created"] = this.created ? this.created.toISOString() : <any>null;
        data["due"] = this.due ? this.due.toISOString() : <any>null;
        data["importance"] = this.importance !== undefined ? this.importance : <any>null;
        data["note"] = this.note !== undefined ? this.note : <any>null;
        data["done"] = this.done !== undefined ? this.done : <any>null;
        data["effort"] = this.effort !== undefined ? this.effort : <any>null;
        data["order"] = this.order !== undefined ? this.order : <any>null;
        if (this.subTaskSet && this.subTaskSet.constructor === Array) {
            data["subTaskSet"] = [];
            for (let item of this.subTaskSet)
                data["subTaskSet"].push(item.toJSON());
        }
        data["category"] = this.category ? this.category.toJSON() : <any>null;
        data["categoryID"] = this.categoryID !== undefined ? this.categoryID : <any>null;
        return data;
    }
}

export interface ITask {
    taskID: number;
    title?: string | null;
    created: Date;
    due?: Date | null;
    importance?: Importance | null;
    note?: string | null;
    done: boolean;
    effort?: number | null;
    order: number;
    subTaskSet?: SubTask[] | null;
    category?: Category | null;
    categoryID: number;
}

export enum Importance {
    A = 0,
    B = 1,
    C = 2,
}

export class SubTask implements ISubTask {
    subTaskID: number;
    title?: string | null;
    done: boolean;
    created: Date;
    task?: Task | null;
    taskID: number;

    constructor(data?: ISubTask) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.subTaskID = data["subTaskID"] !== undefined ? data["subTaskID"] : <any>null;
            this.title = data["title"] !== undefined ? data["title"] : <any>null;
            this.done = data["done"] !== undefined ? data["done"] : <any>null;
            this.created = data["created"] ? new Date(data["created"].toString()) : <any>null;
            this.task = data["task"] ? Task.fromJS(data["task"]) : <any>null;
            this.taskID = data["taskID"] !== undefined ? data["taskID"] : <any>null;
        }
    }

    static fromJS(data: any): SubTask {
        let result = new SubTask();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["subTaskID"] = this.subTaskID !== undefined ? this.subTaskID : <any>null;
        data["title"] = this.title !== undefined ? this.title : <any>null;
        data["done"] = this.done !== undefined ? this.done : <any>null;
        data["created"] = this.created ? this.created.toISOString() : <any>null;
        data["task"] = this.task ? this.task.toJSON() : <any>null;
        data["taskID"] = this.taskID !== undefined ? this.taskID : <any>null;
        return data;
    }
}

export interface ISubTask {
    subTaskID: number;
    title?: string | null;
    done: boolean;
    created: Date;
    task?: Task | null;
    taskID: number;
}

export class SwaggerException extends Error {
    message: string;
    status: number;
    response: string;
    result: any;

    constructor(message: string, status: number, response: string, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.result = result;
    }
}

function throwException(message: string, status: number, response: string, result?: any): Observable<any> {
    if(result !== null && result !== undefined)
        return Observable.throw(result);
    else
        return Observable.throw(new SwaggerException(message, status, response, null));
}

function blobToText(blob: Blob): Observable<string> {
    return new Observable<string>((observer: any) => {
        let reader = new FileReader();
        reader.onload = function() {
            observer.next(this.result);
            observer.complete();
        }
        reader.readAsText(blob);
    });
}
